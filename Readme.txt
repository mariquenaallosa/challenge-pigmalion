# Ejercicio T√©cnico

Este repositorio contiene la resoluci√≥n del ejercicio t√©cnico que consiste en determinar si un n√∫mero `X` puede formarse mediante la suma de dos elementos de un array.

---

## üìå Lenguaje y herramientas

- **Lenguaje:** Java
- **Versi√≥n utilizada:** JDK 17 (compatible con Java 11+)
- **Entorno de desarrollo:** IntelliJ IDEA
- **Dependencias:** Ninguna (proyecto Java puro, sin Maven ni Gradle)

---

## üìÅ Archivos incluidos

- `SumCheckerFast.java` ‚Üí Algoritmo simple implementado con doble bucle anidado. Prioriza rapidez de desarrollo.
- `SumCheckerOptimized.java` ‚Üí Algoritmo eficiente utilizando `HashSet` para buscar complementos en una pasada. Prioriza rendimiento.
- `SumChecker.java` ‚Üí Archivo principal que act√∫a como `main`, con un men√∫ interactivo en consola para elegir algoritmo y conjunto de prueba.

---

## üìå Suposiciones realizadas

- El array puede contener n√∫meros repetidos.
- No se permite usar el **mismo √≠ndice** dos veces.
- Dos valores iguales pueden sumarse si est√°n en posiciones distintas.
- El objetivo es retornar un valor booleano (`true` o `false`) indicando si existe alguna combinaci√≥n v√°lida.
- Se desarrollan **dos enfoques**, como lo solicita el enunciado: uno que minimiza el tiempo de desarrollo, y otro que optimiza recursos y tiempo de ejecuci√≥n.

---

## ‚ñ∂Ô∏è Instrucciones de ejecuci√≥n

1. Abrir los archivos en un entorno como IntelliJ, VS Code o Replit. Actualmente se encuentra en Replit https://replit.com/@mariquenaallosa/challenge-pigmalion?v=1 
2. Ejecutar `SumChecker.java`, que incluye un men√∫ en consola para elegir qu√© algoritmo correr (`Fast` o `Optimized`) y con qu√© array de prueba.
3. El resultado se imprime en consola.


